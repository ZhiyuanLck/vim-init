global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    try:
        first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
        return first != ignore
    except StopIteration:
        return False
endglobal

snippet no "note" b
\documentclass[normal,blue]{elegantnote}
\usepackage{scrextend}
\setkomafont{labelinglabel}{\bfseries}
\usepackage{caption}
\usepackage{subfigure}
${1:
\setmonofont{DejaVu Sans Mono for Powerline}
\usepackage[
  newfloat,
  cachedir=../output,
  outputdir=../output]{minted}
\definecolor{bg}{rgb}{0.85,0.85,0.85}
\renewcommand{\theFancyVerbLine}{\ttfamily
  \textcolor[rgb]{0,0,0}{\small
  \oldstylenums{\arabic{FancyVerbLine}}}}
\setminted{
  autogobble,
  breaklines,
  bgcolor=bg,
  linenos,
  python3}
\newminted{sh}{}
\newminted{py}{}
\newenvironment{code}{\captionsetup{type=listing}}{}
\SetupFloatingEnvironment{listing}{name=Code}
}
\begin{document}
	$2
\end{document}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	\includegraphics[width=${2:0.8}\textwidth]{$3}
\end{figure}
endsnippet


snippet mc "minted code" i
\begin{code}
\captionof{listing}{$1}
\begin{$2}
$3
\end{$2}
\end{code}
endsnippet


snippet pr "preamble" b
\usepackage{scrextend}
\setkomafont{labelinglabel}{\bfseries}
\usepackage{caption}
\usepackage{subfigure}
endsnippet

snippet it "item" b
\item[$1] $2
endsnippet


snippet pa "usepackage" b
\\usepackage{$0}
endsnippet

snippet po "usepackage with option" bA
\\usepackage[$0]{$1}
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}
	${2:${VISUAL}}
\end{$1}
endsnippet

snippet beo "begin{} / end{}" bA
\begin{$1}{$2}
	${3:${VISUAL}}
\end{$1}
endsnippet

snippet py "pycode" b
\begin{pycode}
$1
\end{pycode}
endsnippet


snippet frame "frame" bA
\begin{frame}{$1}
	${2:${VISUAL}}
\end{frame}
endsnippet

snippet lab "labeling" b
\begin{labeling}{$0}
	\item[$1] $2
\end{labeling}
endsnippet

snippet com "company" b
\begin{labeling}{一一一一一}
  \item[法定代表人] $15
  \item[官网] $16
  \item[注册资本] $1
  \item[实缴资本] $2
  \item[成立日期] $3
  \item[经营状态] $4
  \item[公司类型] $5
  \item[行业] $6
  \item[核准日期] $7
  \item[登记机关] $8
  \item[营业期限] $9
  \item[纳税人资质] $10
  \item[人员规模] $11
  \item[参保人数] $12
  \item[注册地址] $13
  \item[经营范围] $14
\end{labeling}
endsnippet


snippet /tt "ttfamily" iA
\{\\ttfamily $1\}
endsnippet

snippet /bemi "minted" bA
\begin{minted}{$1}
	$2
\end{minted}
$0
endsnippet

snippet /mi "mint" iA
\mint{$1}{$2}
endsnippet

snippet /imi "mintinline" iA
\mintinline{$1}{$2}
endsnippet

# snippet al "beamer alert" i
# \alert{${1:${VISUAL}}}
# endsnippet

snippet ch "child"
child {node {$1}}$0
endsnippet


snippet url "url" i
\href{$1}{$2}
endsnippet

snippet kaishu "kaishu"
\subsubsection{$1}
\begin{labeling}{电子书}
\item[pdf] $2
\item[电子书] $3
\item[字帖] $4
\end{labeling}
endsnippet


# 行内公式
snippet mk "Math" wA
$${1:${VISUAL}}$
endsnippet

# 行间公式
snippet dm "Math" wA
\[
$1
\]
endsnippet

# 下标
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet ds "subscript" iA
_{$1}$0
endsnippet

# 上标
context "math()"
snippet us "superscript" iA
^{$1}$0
endsnippet

# 分数
# //生成空的分数
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet
# 自动生成分数
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

# 括号生成分数
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

