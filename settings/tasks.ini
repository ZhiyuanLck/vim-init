[file-compile]
command:c=gcc -g -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
command:cpp=g++ -ggdb -std=c++17 -Wall -O2 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
cwd=$(VIM_FILEDIR)
errorformat=%f:%l:%m
save=1

[file-run]
command="$(VIM_FILEPATH)"
; command:c,cpp="$(VIM_PATHNOEXT)"
command:cpp=g++ -std=c++17 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" && "$(VIM_PATHNOEXT)"
; command:cpp=g++ -ggdb -std=c++17 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"
command:python=python "$(VIM_FILEPATH)"
command:make=make -f "$(VIM_FILEPATH)"
command:javascript=node "$(VIM_FILEPATH)"
command:sh=bash "$(VIM_FILEPATH)"
command:lua=lua "$(VIM_FILEPATH)"
command:perl=perl "$(VIM_FILEPATH)"
command:ruby=ruby "$(VIM_FILEPATH)"
command:fish=fish "$(VIM_FILEPATH)"
command:php=php "$(VIM_FILEPATH)"
command:erlang=escript "$(VIM_FILEPATH)"
output=terminal
pos=bottom
cwd=$(VIM_FILEDIR)
save=1

[make]
command=make --no-print-directory
# 设置在当前项目的根目录处运行 make
cwd=$(VIM_ROOT)/build
output=quickfix
save=2

[make-run]
command=make --no-print-directory run
# <root> 是 $(VIM_ROOT) 的别名，写起来容易些
cwd=<root>/build
save=2
output=terminal

[make-test]
command=env CTEST_OUTPUT_ON_FAILURE=1 make --no-print-directory test
cwd=<root>/build
save=2
output=terminal

[cmake]
command=mkdir build && cd build && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .. && ln -s compile_commands.json ..
cwd=<root>
save=2
errorformat=%f:%l:%m

[grep-word]
command=rg -n --no-heading --color never "$(?keyword)" "<root>" -tc -tcpp -tpy -tvim -ttex
cwd=$(VIM_ROOT)
errorformat=%f:%l:%m

[grep-vim]
command=rg -n --no-heading --color never "$(?keyword)" "<root>" -tc -tcpp -tpy -tvim -tgo
cwd=~/.vim/vim-init/init
errorformat=%f:%l:%m
